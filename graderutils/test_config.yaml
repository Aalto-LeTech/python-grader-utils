# List of pairs of test modules to be executed and their descriptions as shown to the user.
test_modules_data:
  - [validation_tests, Pre-grading validation tests]
  - [grader_tests, Grader tests]


# Optional
# Paths to custom Jinja2 HTML templates to be used instead of the default ones.
# In case of the MOOC grader, the easiest way to use these is probably to copy them into the sandboxed "user" directory with the "prepare" action.

# error_template: ./my_error_template.html
# feedback_template: ./my_feedback_template.html


# Optional file validation
# All errors from failed validation are passed to the error template.
# If there are no errors, nothing is done.

validation:
  # Try importing my_solution, catch all exceptions and pass them to the error template.
  - type: python_import
    file: my_solution.py
  # Set restricted syntax which should not be found in file.
  # If such syntax is found, pass data of found matches to the error template.
  - type: python_blacklist
    file: my_solution.py
    # By default, if a validation task fails, validation is stopped and feedback is shown for the failed task.
    # break_on_fail allows showing several failed validation tasks after validation is complete.
    break_on_fail: False
    message: "In this exercise, some builtin syntax related to lists is not allowed, since you should make you own list implementation."
    # Names of abstract syntax tree nodes and custom messages which are shown if nodes are found in the submitted file.
    # A comprehensive list of AST nodes can be found here: https://greentreesnakes.readthedocs.io/en/latest/nodes.html
    node_names:
      ListComp: List comprehensions
      For: For loops
    # Optionally, define exact strings returned by ast.dump, which are not allowed.
    # The graderutils.validation module contains a simple ast_dump function for dumping all ast nodes of a given source string.
    node_dumps:
      "Name(id='list', ctx=Load())": Loading the list builtin
  # Simple regexp-based substring blacklisting.
  - type: plain_text_blacklist
    file: my_solution.sql
    # If ignorecase is True, all keys in strings dict must be in lowercase
    ignorecase: True
    strings:
      drop: Dropping tables
      delete: Deleting entries

  # More validation options

  # Whitelists are inverted blacklists, where all node names and node dumps are restricted, unless specified in the whitelist.
  # There are no exceptions, if the node is not in included in the whitelist and it is in the submitted module, it will not be accepted.
  # The messages in node_names and node_dumps are ignored, but you can provide a message in 'message'.
  - type: python_whitelist
    file: my_solution.py
    message: "You should only submit closed form equations, other kind of syntax is not allowed in this exercise."
    node_names:
      # Node messages are ignored for whitelists and the name of the missed node will be used instead.
      Module: Module
      Assign: Assigning values to names
      # Storing and loading names/variables
      Name: Using names
      Load: Loading a name
      Store: Storing a name
      # Bitwise operations and matrix multiplication are not included
      BinOp: Binary operations
      Add: Addition
      Sub: Subtraction
      Mult: Multiplication
      Div: Division
      FloorDiv: Floor division
      Mod: Modulo
      Pow: Power

