# List of pairs of test modules to be executed and their descriptions as shown to the user.
test_modules_data:
  - [validation_tests, Pre-grading validation tests]
  - [grader_tests, Grader tests]


# Optional
# Paths to custom Jinja2 HTML templates to be used instead of the default ones.
# In case of the MOOC grader, the easiest way to use these is probably to copy them into the sandboxed "user" directory with the "prepare" action.

# error_template: ./my_error_template.html
# feedback_template: ./my_feedback_template.html


# Optional
# Dictionary of Python abstract syntax tree (ast) nodes that should not be found in the submitted file and the descriptions shown to the user if a match is found.
# Can be either the node name (i.e. node.__class__.__name__) or the string as returned by ast.dump.
# The graderutils.validation module contains a simple ast_dump function for dumping ast nodes of given source strings.
# TODO: allow short and long descriptions for blacklist matches

# If commented out, all blacklist checks are skipped.
blacklists:
  - type: python
    node_names:
      ListComp: List comprehensions
      For: For loops
    # TODO maybe add some regexp support so that the dump could be patterns
    node_dumps:
      "Name(id='list', ctx=Load())": Loading the list builtin
      "ImportFrom(module='os', names=[alias(name='chdir', asname=None)], level=0)": Importing the chdir function from the os module
    # List of Python files that should be searched for blacklisted names.
    check_files:
      - my_solution.py

  - type: plain_text
    # If ignorecase is True, all keys in strings dict must be in lowercase
    ignorecase: True
    strings:
      drop: Dropping tables
      delete: Deleting entries
    check_files:
      - my_solution.sql

